#!/usr/bin/env python

PACKAGE='ball_filter'
import roslib;
roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator();

params = gen.add_group("Ball filter parameters");

params.add("bounds__z__min", double_t, 1, "ball detection below this height will be discarded", 1.0, 0.0, 20.0);
params.add("bounds__z__max", double_t, 1, "ball detection above this height will be discarded", 1.0, 0.0, 20.0);

params.add("min_updates_to_confirm", int_t, 1, "minimal number of updates to be associated to the chosen ball for it to be confirmed", 30, 0, 600);

params.add("circle__min_radius", double_t, 1, "fitted (RANSAC) or esitmated (UKF) cicles with radius smaller than this are discarded", 0.5, 0.0, 50.0);

ukf_params = gen.add_group("UKF parameters");

ukf_params.add("ukf__process_std__position", double_t, 1, "standard deviation of process noise of the position states", 1.0, 0.0, 20.0);
ukf_params.add("ukf__process_std__yaw", double_t, 1, "standard deviation of process noise of the yaw state", 1.0, 0.0, 20.0);
ukf_params.add("ukf__process_std__curvature", double_t, 1, "standard deviation of process noise of the curvature state", 1.0, 0.0, 20.0);

ukf_params.add("ukf__init_std__yaw", double_t, 1, "standard deviation of initial covariance of the yaw state", 1.0, 0.0, 20.0);
ukf_params.add("ukf__init_std__curvature", double_t, 1, "standard deviation of initial covariance of the curvature state", 1.0, 0.0, 20.0);

ukf_params.add("ukf__meas_std__curvature_circ", double_t, 1, "standard deviation of covariance measurement, set from the fitted circle", 1.0, 0.0, 20.0);
ukf_params.add("ukf__meas_std__curvature_line", double_t, 1, "standard deviation of covariance measurement, set when away from fitted circle", 1.0, 0.0, 20.0);

ukf_params.add("ukf__prediction_step", double_t, 1, "duration between predictions of the ball trajectory", 20.0, 0.0, 100.0);
ukf_params.add("ukf__prediction_horizon", double_t, 1, "duration of the prediction horizont for the ball trajectory", 20.0, 0.0, 100.0);

lkf_params = gen.add_group("LKF parameters");

lkf_params.add("lkf__min_init_points", int_t, 1, "miniumal number of points to initialize the LKF", 10, 0, 500);
lkf_params.add("lkf__process_std__position", double_t, 1, "standard deviation of process noise of the position states", 1.0, 0.0, 20.0);
lkf_params.add("lkf__process_std__velocity", double_t, 1, "standard deviation of process noise of the velocity states", 1.0, 0.0, 20.0);
lkf_params.add("lkf__process_std__acceleration", double_t, 1, "standard deviation of process noise of the acceleration states", 1.0, 0.0, 20.0);

lkf_params.add("lkf__init_std__velocity", double_t, 1, "standard deviation of initial covariance of the velocity states", 1.0, 0.0, 20.0);
lkf_params.add("lkf__init_std__acceleration", double_t, 1, "standard deviation of initial covariance of the acceleration states", 1.0, 0.0, 20.0);

lkf_params.add("lkf__prediction_step", double_t, 1, "duration between predictions of the ball trajectory", 20.0, 0.0, 100.0);
lkf_params.add("lkf__prediction_horizon", double_t, 1, "duration of the prediction horizont for the ball trajectory", 20.0, 0.0, 100.0);
lkf_params.add("lkf__max_speed_err", double_t, 1, "for estimated abs. speed error from the speed according to the rules larger than this, the LKF will be reset to sanitize the output", 0.5, 0.0, 10.0);
lkf_params.add("lkf__max_time_since_update", double_t, 1, "after no detection is associated to the chosen ball for this duration, it is forgotten", 2.0, 0.0, 60.0);

rheiv_params = gen.add_group("RHEIV parameters");

rheiv_params.add("rheiv__min_points", int_t, 1, "miniumal number of points to start the plane fitting", 200, 0, 100000);
rheiv_params.add("rheiv__max_time_since_update", double_t, 1, "after no detection is associated to the chosen ball for this duration, it is forgotten", 2.0, 0.0, 60.0);

exit(gen.generate(PACKAGE, "ball_filter", "FilterParams"))
